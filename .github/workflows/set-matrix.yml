name: Set Matrix

on:
  workflow_call:
    outputs:
      project-name:
        description: "project name to run"
        value: ${{ jobs.set-matrix.outputs.project-name }}

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      project-name: ${{steps.list_dirs.outputs.project-name}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: List files
        run: |
          pwd 
          ls -al 
      - name: GitHub Context Debug
        run: |
            echo "github.ref=${{ github.ref }}"
            echo "github.base_ref=${{ github.base_ref }}"
            echo "github.head_ref=${{ github.head_ref }}"
            echo "github.sha=${{ github.sha }}"
            echo "github.actor_id=${{ github.actor_id }}"
            echo "github.triggering_actor=${{ github.triggering_actor }}"
            echo "github.event_name=${{ github.event_name }}"
      - name: List available projects
        id: project_list
        run: |
              ls -al
              echo "-----------------------------------------------------------------------------"
              find . -name main.tf | sed s/"."// | sed s/"main.tf"// | sed 's/.$//' |jq -cnR '[inputs | select(length>0)]' | jq -c '.[]'
              export tfmain_folders=$(find . -name main.tf | sed s/"."// | sed s/"main.tf"// | sed 's/.$//' |jq -cnR '[inputs | select(length>0)]' | jq -c '.[]')
              echo "-----------------------------------------------------------------------------"
              echo "tfmain_folders=${tfmain_folders}"
              echo "-----------------------------------------------------------------------------"
              echo "Convert to array......"
              declare -a files_array=($(echo ${tfmain_folders} | tr "\n" " "))
              echo "file_array[0]: ${files_array[0]}"
              echo "-----------------------------------------------------------------------------"
    
              project_list=()
    
              for file in "${files_array[@]}"; do
                  echo "---------------------------------------------"
                  echo "File=$file"
    
                  export project_name=$(echo $file | awk -F "/" '{print $3}')
    
                  echo "Folder=${account}_${project_name}_${subproject_name}"
                  project_list+=("${project_name}")
              done
              echo "-----------------------------------------------------------------------------"
              for project in "${project_list[@]}"; do
                echo "$project"
              done
              echo "projects=${project_list[@]}"  >> $GITHUB_OUTPUT
    
      - name: Verify available projects list
        run: |
          echo ${{ steps.project_list.outputs.projects }}
      - name: Get project directories
        id: list_dirs
        run: |
            echo "---------------------------------------------"
            echo "steps.project_list.outputs.projects=${{ steps.project_list.outputs.projects }}"
            echo "---------------------------------------------"
            export available_projects=$(echo "\"${{ steps.project_list.outputs.projects }}\"" | jq -c 'split(" ")')
            echo "available_projects=${available_projects}"
            echo "---------------------------------------------"
            
            
            if [ -z $INPUT_PROJECT_NAME ]; then
              echo "Project name is not provided. Run all projects."
              echo "project-name=${available_projects}" >> $GITHUB_OUTPUT
            else
              export file="/${{ github.event.inputs.cloud-project-name }}"
              echo "file=${file}"
              export env=$(awk -F'"' '/env/{print $2}' ".${file//\"/}/terraform.tfvars")
              export full_dc=$(awk -F'"' '/deployment_zone/{print $2}' ".${file//\"/}/terraform.tfvars")
              export dc=$(echo "$full_dc" | sed 's/^deploymentzone-//')
              echo " env=${env}"
              echo " dc=${dc}"
              echo "Project name is provided. Only run with project-name"
              echo "project-name=[\"${{ github.event.inputs.cloud-account }}_${{ github.event.inputs.cloud-project-name }}_${{ github.event.inputs.cloud-subproject-name }}\"]" >> $GITHUB_OUTPUT
            fi
      # - name: Get changed projects
      #   id: set-matrix
      #   run: |
      #     # Find changed directories under projects/ for PRs or pushes
      #     if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
      #       git fetch origin ${{ github.base_ref }}
      #       CHANGED=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }} | grep '^projects/' | awk -F'/' '{print $2}' | sort -u)
      #     else
      #       CHANGED=$(git diff --name-only ${{ github.sha }}^ ${{ github.sha }} | grep '^projects/' | awk -F'/' '{print $2}' | sort -u)
      #     fi
      #     # Fallback: if nothing changed, run all
      #     if [ -z "$CHANGED" ]; then
      #       CHANGED=$(ls projects)
      #     fi
      #     # Exclude example-project
      #     CHANGED=$(echo "$CHANGED" | grep -v '^example-project$')
      #     # Build compact JSON array (no leading/trailing spaces)
      #     MATRIX=$(printf '%s\n' $CHANGED | jq -R . | jq -s -c .)
      #     echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
      #   shell: bash
      #   env:
      #     GITHUB_EVENT_NAME: ${{ github.event_name }}

      # - name: Show matrix debug output
      #   run: |
      #     echo "CHANGED: $CHANGED"
      #     echo "MATRIX: $MATRIX"
      #   shell: bash
